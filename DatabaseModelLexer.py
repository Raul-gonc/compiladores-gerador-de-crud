# Generated from DatabaseModel.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,169,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
        3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,3,9,95,8,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,3,11,120,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,154,
        8,12,1,13,1,13,5,13,158,8,13,10,13,12,13,161,9,13,1,14,4,14,164,
        8,14,11,14,12,14,165,1,14,1,14,0,0,15,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,1,0,3,3,0,65,90,
        95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,178,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,31,
        1,0,0,0,3,37,1,0,0,0,5,39,1,0,0,0,7,41,1,0,0,0,9,43,1,0,0,0,11,45,
        1,0,0,0,13,50,1,0,0,0,15,54,1,0,0,0,17,58,1,0,0,0,19,94,1,0,0,0,
        21,96,1,0,0,0,23,119,1,0,0,0,25,153,1,0,0,0,27,155,1,0,0,0,29,163,
        1,0,0,0,31,32,5,116,0,0,32,33,5,97,0,0,33,34,5,98,0,0,34,35,5,108,
        0,0,35,36,5,101,0,0,36,2,1,0,0,0,37,38,5,40,0,0,38,4,1,0,0,0,39,
        40,5,41,0,0,40,6,1,0,0,0,41,42,5,123,0,0,42,8,1,0,0,0,43,44,5,125,
        0,0,44,10,1,0,0,0,45,46,5,80,0,0,46,47,5,79,0,0,47,48,5,83,0,0,48,
        49,5,84,0,0,49,12,1,0,0,0,50,51,5,80,0,0,51,52,5,85,0,0,52,53,5,
        84,0,0,53,14,1,0,0,0,54,55,5,71,0,0,55,56,5,69,0,0,56,57,5,84,0,
        0,57,16,1,0,0,0,58,59,5,68,0,0,59,60,5,69,0,0,60,61,5,76,0,0,61,
        62,5,69,0,0,62,63,5,84,0,0,63,64,5,69,0,0,64,18,1,0,0,0,65,66,5,
        105,0,0,66,67,5,110,0,0,67,95,5,116,0,0,68,69,5,115,0,0,69,70,5,
        116,0,0,70,71,5,114,0,0,71,72,5,105,0,0,72,73,5,110,0,0,73,95,5,
        103,0,0,74,75,5,102,0,0,75,76,5,108,0,0,76,77,5,111,0,0,77,78,5,
        97,0,0,78,95,5,116,0,0,79,80,5,98,0,0,80,81,5,111,0,0,81,82,5,111,
        0,0,82,83,5,108,0,0,83,84,5,101,0,0,84,85,5,97,0,0,85,95,5,110,0,
        0,86,87,5,100,0,0,87,88,5,97,0,0,88,89,5,116,0,0,89,90,5,101,0,0,
        90,91,5,116,0,0,91,92,5,105,0,0,92,93,5,109,0,0,93,95,5,101,0,0,
        94,65,1,0,0,0,94,68,1,0,0,0,94,74,1,0,0,0,94,79,1,0,0,0,94,86,1,
        0,0,0,95,20,1,0,0,0,96,97,5,59,0,0,97,22,1,0,0,0,98,99,5,80,0,0,
        99,100,5,82,0,0,100,101,5,73,0,0,101,102,5,77,0,0,102,103,5,65,0,
        0,103,104,5,82,0,0,104,120,5,89,0,0,105,106,5,85,0,0,106,107,5,78,
        0,0,107,108,5,73,0,0,108,109,5,81,0,0,109,110,5,85,0,0,110,120,5,
        69,0,0,111,112,5,78,0,0,112,113,5,79,0,0,113,114,5,84,0,0,114,115,
        5,32,0,0,115,116,5,78,0,0,116,117,5,85,0,0,117,118,5,76,0,0,118,
        120,5,76,0,0,119,98,1,0,0,0,119,105,1,0,0,0,119,111,1,0,0,0,120,
        24,1,0,0,0,121,122,5,111,0,0,122,123,5,110,0,0,123,124,5,101,0,0,
        124,125,5,45,0,0,125,126,5,116,0,0,126,127,5,111,0,0,127,128,5,45,
        0,0,128,129,5,111,0,0,129,130,5,110,0,0,130,154,5,101,0,0,131,132,
        5,111,0,0,132,133,5,110,0,0,133,134,5,101,0,0,134,135,5,45,0,0,135,
        136,5,116,0,0,136,137,5,111,0,0,137,138,5,45,0,0,138,139,5,109,0,
        0,139,140,5,97,0,0,140,141,5,110,0,0,141,154,5,121,0,0,142,143,5,
        109,0,0,143,144,5,97,0,0,144,145,5,110,0,0,145,146,5,121,0,0,146,
        147,5,45,0,0,147,148,5,116,0,0,148,149,5,111,0,0,149,150,5,45,0,
        0,150,151,5,111,0,0,151,152,5,110,0,0,152,154,5,101,0,0,153,121,
        1,0,0,0,153,131,1,0,0,0,153,142,1,0,0,0,154,26,1,0,0,0,155,159,7,
        0,0,0,156,158,7,1,0,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,
        0,0,0,159,160,1,0,0,0,160,28,1,0,0,0,161,159,1,0,0,0,162,164,7,2,
        0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,
        0,0,166,167,1,0,0,0,167,168,6,14,0,0,168,30,1,0,0,0,6,0,94,119,153,
        159,165,1,6,0,0
    ]

class DatabaseModelLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    TYPE = 10
    PV = 11
    PROP = 12
    REL_TYPE = 13
    ID = 14
    WS = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'table'", "'('", "')'", "'{'", "'}'", "'POST'", "'PUT'", "'GET'", 
            "'DELETE'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "TYPE", "PV", "PROP", "REL_TYPE", "ID", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "TYPE", "PV", "PROP", "REL_TYPE", "ID", 
                  "WS" ]

    grammarFileName = "DatabaseModel.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


